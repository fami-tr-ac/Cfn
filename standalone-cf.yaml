AWSTemplateFormatVersion: '2010-09-09'
Description: "stand alone server for belltech"

Parameters: 
  Prefix: 
    Description: Prefix of name
    Type: String
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"

Resources:
  # --- Network
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-vpc-cf"

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-igw-cf"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  # Subnet
  PubSubA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-pub-sub-a-cf"

  PubSubC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-pub-sub-b-cf"

  PrivateSubA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-private-sub-a-cf"

  PrivateSubC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-private-sub-c-cf"

  # Route Table
  PubSubRTA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-pub-sub-rt-a-cf"

  PubSubRTC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-pub-sub-rt-c-cf"

  # PubSub-インターネット間のルーティング
  PubSubToInternetA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PubSubRTA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  PubSubToInternetC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PubSubRTC
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  # ルートテーブルをサブネットに関連付け
  AssoPubSubRTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubA
      RouteTableId: !Ref PubSubRTA
  AssoPubSubRTC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubC
      RouteTableId: !Ref PubSubRTC

  # Security Group
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Prefix}-alb-sg-cf"
      GroupDescription: "-"
      VpcId : !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Prefix}-ec2-sg-cf"
      GroupDescription: Allow SSH and HTTP access only White list
      VpcId : !Ref VPC
      SecurityGroupIngress:
        # Http  
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSG
        # ssh
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # mysql
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  # ---- EC2
  EC2: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-0404778e217f54308
      KeyName: !Ref KeyName
      InstanceType: t2.small
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PubSubA
          GroupSet:
            - !Ref EC2SG
      UserData:
        Fn::Base64: |-
          #!/bin/bash
          yum -y update
          yum install -y git
          yum install -y docker
          amazon-linux-extras install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/v2.1.1/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-ec2-a-cf"

  # --- ALB
  TG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200
      Name: !Sub "${Prefix}-tg-cf"
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
        - Key: stickiness.enabled
          Value: false
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 86400
      Targets:
        - Id: !Ref EC2
          Port: 80
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: false
        - Key: deletion_protection.enabled
          Value: false
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Sub "${Prefix}-alb-cf"
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ALBSG
      Subnets: 
        - !Ref PubSubA
        - !Ref PubSubC

  ALBListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig: 
            Host: '#{host}'
            Path: '/#{path}'
            Port: 443
            Protocol: HTTPS
            Query: '#{query}'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBListenerHttps:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: "arn:aws:acm:ap-northeast-1:699946123554:certificate/946fc489-8e21-4d68-a448-e5dfb6360bfd"
      DefaultActions:
        - TargetGroupArn: !Ref TG
          Type : forward
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS

  # --- Domain
  route53RSGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: "Z0923645UIS582NLST61" # dev.wimax.belletech.page
      RecordSets:
        - Name: !Sub "ec2-${Prefix}.dev.wimax.belletech.page."
          ResourceRecords:
            - !GetAtt EC2.PublicIp
          Type: A
          TTL: 300

        - Name: !Sub "${Prefix}.dev.wimax.belletech.page."
          AliasTarget:
            HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
            DNSName: !GetAtt ALB.DNSName
          Type: A

Outputs:
  EC2PublicIP:
    Value: !GetAtt EC2.PublicIp
    Description: Public IP of EC2 instance
  InnerALBDNS:
    Value: !GetAtt ALB.DNSName
    Description: Inner DNS Name of ALB
  EC2Domain:
    Value: !Sub "ec2-${Prefix}.dev.wimax.belletech.page."
    Description: DNS Name of EC2 for develop
  ALBDomain:
    Value: !Sub "${Prefix}.dev.wimax.belletech.page."
    Description: Public DNS Name of ALB for All
